{"name":"Docker","tagline":"Как готовить докер для osx, как изменить размер dev/shm и сделать удобный volume share","body":"###Введение\r\n* Для начала ставим себе сам докер, подробности тут https://docs.docker.com/installation/mac/   \r\n* там же читаем что такое докер https://docs.docker.com/introduction/understanding-docker/  \r\nесли лень читать, то docker контейнеры можно рассматривать как stateless виртуальные машины с мгновенным стартом, а сам docker это удобная среда для настройки, деплоя и управления контейнерами *(пока она очень удобна для работы с неколькими контейнерами в рамках одной машины, но в след. версиях уже будет удобна и в рамках кластера)*   \r\n* если ставим на Linux то не забываем добавить своего юзера в группу docker\r\n```bash\r\nsudo groupadd docker\r\nsudo gpasswd -a ${USER} docker\r\nsudo service docker restart\r\n```\r\nпосле перезапустить shell (закрыть терминал открыть терминал)\r\n\r\n* Почему docker нужен (основное): \r\n * Любой код что мы пишем требует какого то окружения (переменные среды, дополнительные сервисы, библиотеки и т.п.), окружение среды у всех разное, что приводит к ошибкам на деплое *(например код работающий на маке отказывается запускаться в облаке google без дополнительных танцев)*\r\n * Многие библиотеки и сервисы на OSX ведут себя отлично от Linux, до кучи OSX не очень posix система что приводит к гемороям даже для простых bash команд - отличия в sed в awk и куче всего, аналогично различия в системных вызовах на c++ и тп.\r\n * Есть геморой по подключению, даже ненадолго, девелопера в чужой проект *(например настройка моего окружения по опыту у разработчиков занимает сутки - двое)*, аналогично я легко и быстро могу поправить чужой код на python или ruby если мне при этом не надо читать кучу док про pip gem версионность и тп. *(недавний опыт с питоном показал, что чтоб просто поправить три линии кода пришлось ставить питон -  понимать чем питон 2 отличается от питон 3 и снова ставить питон, потом ставить pip узнавать команды pip  и тп - это куча времени)*\r\n * Чем больше людей в проектах тем больше вероятность что окружение одного проекта начнет конфликтовать с окружением другого. \r\n * До кучи любимая нами ubuntu не везде стоит (в облаке гугл например нет образа ubuntu) те кто после убунту настраивали чистый debian или rhel или не дай бог oracle linux в курсе какого горя порой можно словить просто пытаясь разрулить установку даже привычных программ.\r\n * Dockerfile описывающий контейнер это легко читаемая последовательность об окружении системы, что немаловажно для администрирования\r\n\r\n---\r\n\r\n####Голый образ любой системы это не самая удобная вещь, поэтому я сразу напишу как сделать удобный рабочий контейнер\r\n* Всегда удобно взять за основу следующий image - \r\n\"phusion/baseimage:<VERSION>\"  \r\nгде версию глянуть тут https://github.com/phusion/baseimage-docker/blob/master/Changelog.md  \r\n#####в чем бонусы этого image\r\n * построен на убунте   \r\n * сразу настроен runit аналог supervisord, upstart и тп    \r\n * настроены примочки как удобно просто копированием в Dockerfile добавлять процессы для старта   \r\n * ENV переменные, сразу стоит ssh сервер (можно отключить)\r\n * Запущен cron (можно отключить)\r\n * Еще по мелочи - подробности про image тут https://github.com/phusion/baseimage-docker \r\n\r\n* Качаем версию себе в моем случае <VERSION> == 0.9.13   \r\ndocker pull phusion/baseimage:0.9.13\r\n\r\n---\r\n\r\n###Поиграться сразу можно так\r\n```bash\r\ndocker run --rm -e \"LANG=en_US.UTF-8\" -e \"LC_ALL=en_US.UTF-8\" -t -i phusion/baseimage:0.9.13 /sbin/my_init -- bash -l\r\n```\r\n####крыжики\r\n* -t выделить псевдо tty\r\n* -i не гасить stdin\r\n* -rm убить контейнер по завершении (без флага можно убитый контейнер закоммитить и тп) вобщем полезняк\r\n* bash -l === exec -l bash\r\n* -- выполнить команду используя my_init - идея что команда будет правильно стартанута чз runit с exec\r\n* -e \"LANG=en_US.UTF-8\" -e \"LC_ALL=en_US.UTF-8\" в контейнере по умолчанию херня полная с локалями поэтому пропишем ENV\r\n\r\n---\r\n\r\n###Теперь сбилдим контейнер на основе Dockerfile\r\n* отклонируем текущий проект себе\r\n```bash\r\ncd projects\r\ngit clone git@github.com:istarkov/docker.git\r\ncd docker\r\n```\r\n\r\n* **билдим базовый image**\r\nустанавливаем основные зависимости, создаем юзеров,   \r\nпрописываем ключи для ssh   \r\nсмотрим в Dockerfile там пошагово расписано что мы делаем\r\n```bash\r\n#копируем в билд свой публичный ключ (нужен для ssh)\r\ncp ~/.ssh/id_rsa.pub id_rsa.pub\r\n#билдим базовый image\r\ndocker build -t istarkov/base .\r\n```\r\n\r\n* создаем image основанный на базовом, что будет происходить смотрим в tmuxexample/Dockerfile  \r\nустанавливаем глобальные зависимости проекта, компилим библиотеку, прописываем deplyment ключ проекта, клонируем проект (и тп.)\r\n```bash\r\ndocker build -t istarkov/tmuxexample tmuxexample\r\n```\r\nфайлы Dockerfile хорошо откомментированы и легки для прочтения, поэтому подробности что и зачем они делают внутри   \r\n\r\n\r\n####Cтартуем\r\n* либо так - если чуем, что что то придется доставлять в контейнер и т.п. *(по хорошему у юзера ice созданного на предыдущем шаге не должно быть sudo)* поэтому контейнер будет запущен в интерактивном режиме c запущенным bash\r\n```bash\r\ndocker run --rm -t -i -p 3222:22 istarkov/tmuxexample /sbin/my_init -- bash -l\r\n```\r\n* или так - в демон режиме\r\n```bash\r\ndocker run -d -p 3222:22 istarkov/tmuxexample\r\n```\r\n* *новые крыжики*\r\n *  -p 3222:22 замапить порт 3222 на хост машине на порт 22 докера \r\n\r\n---\r\n\r\n####Начинаем играть с контейнером\r\n* На маке по ssh к полученному контейнеру коннектимся так\r\n```bash\r\nssh -p 3222 \"ice@`boot2docker ip 2>&1 | sed -n 2,2p | awk -F' ' '{print $9}'`\"\r\n```\r\n* на линуксе так\r\n```bash\r\nssh -p 3222 ice@linux_machine_ip\r\n```\r\n* сконнектившись запускаем команду ./run которая запустит проект - в данном случае tmux менеджер с заранее преконфигуренными опциями\r\n\r\n\r\n\r\n\r\n####Полезняки: \r\n* стереть image так\r\n```bash\r\ndocker rmi istarkov/tmuxexample\r\n```\r\n\r\n* убить все не сбилженые контейнеры и имажи\r\n```bash\r\ndocker rm $(docker ps -a -q)\r\ndocker rmi $(docker images | grep \"^<none>\" | awk \"{print $3}\")\r\n```\r\n* посмотреть какие есть сбилженые image\r\n```bash\r\ndocker images\r\n```\r\n* остальные команды читать тут https://docs.docker.com/userguide/\r\n\r\n---\r\n\r\n\r\n\r\n###Офигенная неприяность докера маленький dev/shm размер и геморой с шарингом файловой системы контейнера в хост систему на OSX (Mac)\r\n*Что не дает выделять большие непрерывные куски shared памяти а именно больше 65мб что для многих задач расчета неприемлимо*  \r\n*А шаринг файловой системы нужен как для размещения db файлов на хост системе (лучше рассматривать контейнеры как stateless объекты) так и для удобной разработки - когда правки кода сразу видны в контейнере*\r\n\r\n####Как с этим боремся - правим код докера, и код boot2docker если у вас apple мак\r\n* **Вариант 1**\r\nКачаем два уже подготовленных мной файла https://drive.google.com/folderview?id=0B-jWb9pIDkx-NS05TFdwZVNGQm8&usp=sharing   \r\nподменяем ./boot2docker/boot2docker.iso на скачанный boot2docker.iso   \r\nкопируем на linux сервера файл docker-1.2.0-dev заходим по ssh и выполняем команду (подменяем установленный докер сервис своим)\r\n```bash\r\nsudo service docker stop ; sudo cp $(which docker) $(which docker)_ ; sudo cp docker-1.2.0-dev $(which docker);sudo service docker \r\n```\r\n\r\n\r\n* **Вариант 2**\r\n*билдим docker и boot2docker сами*  \r\nЗапускаем linux (*под маком с билдом докера лучше не связываться*) не забываем добавить своего юзера в группу docker\r\n```bash\r\nsudo groupadd docker\r\nsudo gpasswd -a ${USER} docker\r\nsudo service docker restart\r\n```\r\n* читаем и настраиваем https://docs.docker.com/contributing/devenvironment/\r\n* в коде vendor/src/github.com/docker/libcontainer/mount/init.go правим размер shm на достойный\r\n```go\r\n{source: \"shm\", path: filepath.Join(rootfs, \"dev\", \"shm\"), device: \"tmpfs\", flags: defaultMountFlags, data: label.FormatMountLabel(\"mode=1777,size=ОЧЕНЬМАЛЕНЬКИЙнаОЧЕНЬБОЛЬШОЙ\", mountLabel)}\r\n```\r\n\r\n* потом билдим докер (см. ссылку) генерим бинарник и выполняем \r\n```bash\r\nsudo service docker stop ; sudo cp $(which docker) $(which docker)_ ; sudo cp ./bundles/1.2.0-dev/binary/docker-1.2.0-dev $(which docker);sudo service docker start\r\n```\r\n\r\nдальше надо этот бинарник заюзать для osx,   \r\nдля этого нам надо перебилдить boot2docker.iso или попросить его у меня.\r\n\r\n\r\n\r\n###Создаем build для boot2docker\r\n*(это если в предыдущем пункте был выбран вариант 2)*\r\n\r\n* Запускаем linux (*под маком с билдом тоже лучше не связываться*) \r\n* отпулим себе базовый контейнер билда iso\r\n```bash\r\ndocker pull boot2docker/boot2docker\r\n```\r\n* откопируем новый docker себе в папку с boot2docker\r\n```bash\r\ncp /home/ice/docker_test/docker_src/docker/bundles/1.2.0-dev/binary/docker-1.2.0-dev docker-1.2.0-dev\r\n```\r\n* создаем докерфайл\r\n```bash\r\nFROM boot2docker/boot2docker\r\nCOPY docker-1.2.0-dev $ROOTFS/usr/local/bin/docker\r\nRUN chmod +x $ROOTFS/usr/local/bin/docker\r\n#тут код для установки guest additions на виртуальную машину который копипастим отсюда https://gist.github.com/mattes/2d0ffd027cb16571895c\r\nRUN /make_iso.sh\r\nCMD [\"cat\", \"boot2docker.iso\"]\r\n```\r\n* билдим контейнер который в процесе билда создаст образ\r\n```bash\r\nsudo docker build -t istarkov/boot2docker .\r\n```\r\n* выводим результат себе из контейнера\r\n```bash\r\nsudo docker run --rm istarkov/boot2docker > boot2docker.iso\r\n```\r\n* гасим докер если запущен\r\n```bash\r\nboot2docker down\r\n```\r\n* копируем сбилженое iso к себе\r\n```bash\r\nrsync -e ssh -avz --progress ice@turk:~/docker_test/docker/boot2docker/boot2docker.iso ~/.boot2docker/boot2docker.iso\r\n```\r\n* Шарим фолдер на макоси на виртуалку - чтобы mount volume опция докера работала на макоси также как и на linux\r\n```bash\r\nVBoxManage sharedfolder add boot2docker-vm -name home -hostpath /Users\r\n```\r\n* Апаем boot2docker взад и проверяем что все замапилось нормально\r\n```bash\r\nboot2docker up\r\n#не ленимся прописать export DOCKER_HOST=tcp://смотри вывод boot2docker up:2375\r\nboot2docker ssh\r\ncd /Users\r\n#если все нормально то в папке /Users должны быть директории макоси /Users\r\nexit\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}